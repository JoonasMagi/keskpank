const express = require('express');\nconst bodyParser = require('body-parser');\nconst cors = require('cors');\nconst fs = require('fs');\nconst path = require('path');\nconst { v4: uuidv4 } = require('uuid');\nconst swaggerJsDoc = require('swagger-jsdoc');\nconst swaggerUi = require('swagger-ui-express');\n\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\n// Swagger seadistus\nconst swaggerOptions = {\n  swaggerDefinition: {\n    openapi: '3.0.0',\n    info: {\n      title: 'Keskpanga API',\n      version: '1.0.0',\n      description: 'Keskpanga API, mis v\u00f5imaldab \u00f5pilastel oma panga rakenduste kaudu \u00fcksteisele \u00fclekandeid teha',\n      contact: {\n        name: 'API tugi',\n        email: 'support@example.com'\n      },\n      license: {\n        name: 'MIT',\n        url: 'https://opensource.org/licenses/MIT'\n      }\n    },\n    servers: [\n      {\n        url: 'http://localhost:3000',\n        description: 'Arendusserver'\n      }\n    ],\n    components: {\n      securitySchemes: {\n        ApiKeyAuth: {\n          type: 'apiKey',\n          in: 'header',\n          name: 'x-api-key'\n        }\n      }\n    }\n  },\n  apis: ['./server.js']\n};\n\nconst swaggerDocs = swaggerJsDoc(swaggerOptions);\n\n// Middleware\napp.use(cors());\napp.use(bodyParser.json());\napp.use(express.static('public'));\napp.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocs));\n\n// Andmebaasi failid\nconst BANKS_FILE = path.join(__dirname, 'data', 'banks.json');\nconst TRANSACTIONS_FILE = path.join(__dirname, 'data', 'transactions.json');\n\n// Tagame, et andmebaasi kataloog eksisteerib\nif (!fs.existsSync(path.join(__dirname, 'data'))) {\n  fs.mkdirSync(path.join(__dirname, 'data'));\n}\n\n// Tagame, et vajalikud JSON failid eksisteerivad\nif (!fs.existsSync(BANKS_FILE)) {\n  fs.writeFileSync(BANKS_FILE, JSON.stringify({ banks: [] }));\n}\n\nif (!fs.existsSync(TRANSACTIONS_FILE)) {\n  fs.writeFileSync(TRANSACTIONS_FILE, JSON.stringify({ transactions: [] }));\n}\n\n// Abifunktsioonid andmebaasi k\u00e4sitlemiseks\nfunction readBanks() {\n  const data = fs.readFileSync(BANKS_FILE, 'utf8');\n  return JSON.parse(data);\n}\n\nfunction writeBanks(data) {\n  fs.writeFileSync(BANKS_FILE, JSON.stringify(data, null, 2));\n}\n\nfunction readTransactions() {\n  const data = fs.readFileSync(TRANSACTIONS_FILE, 'utf8');\n  return JSON.parse(data);\n}\n\nfunction writeTransactions(data) {\n  fs.writeFileSync(TRANSACTIONS_FILE, JSON.stringify(data, null, 2));\n}\n\n/**\n * @swagger\n * tags:\n *   - name: Pangad\n *     description: Pankade halduse API\n *   - name: \u00dclekanded\n *     description: \u00dclekannete halduse API\n */\n\n/**\n * @swagger\n * components:\n *   schemas:\n *     Bank:\n *       type: object\n *       required:\n *         - name\n *         - apiUrl\n *       properties:\n *         id:\n *           type: string\n *           description: Panga unikaalne ID\n *         name:\n *           type: string\n *           description: Panga nimi\n *         apiUrl:\n *           type: string\n *           description: Panga API URL\n *         balance:\n *           type: number\n *           description: Panga bilanss\n *     BankRegistrationRequest:\n *       type: object\n *       required:\n *         - name\n *         - apiUrl\n *       properties:\n *         name:\n *           type: string\n *           description: Panga nimi\n *         apiUrl:\n *           type: string\n *           description: Panga API URL\n *     BankRegistrationResponse:\n *       type: object\n *       properties:\n *         id:\n *           type: string\n *           description: Panga unikaalne ID\n *         name:\n *           type: string\n *           description: Panga nimi\n *         apiKey:\n *           type: string\n *           description: Panga API v\u00f5ti autentimiseks\n *         balance:\n *           type: number\n *           description: Panga algne bilanss\n *     Transaction:\n *       type: object\n *       properties:\n *         id:\n *           type: string\n *           description: \u00dclekande unikaalne ID\n *         fromBankId:\n *           type: string\n *           description: L\u00e4htepanga ID\n *         fromBankName:\n *           type: string\n *           description: L\u00e4htepanga nimi\n *         toBankId:\n *           type: string\n *           description: Sihtpanga ID\n *         toBankName:\n *           type: string\n *           description: Sihtpanga nimi\n *         amount:\n *           type: number\n *           description: \u00dclekande summa\n *         description:\n *           type: string\n *           description: \u00dclekande kirjeldus\n *         timestamp:\n *           type: string\n *           format: date-time\n *           description: \u00dclekande aeg\n *     TransactionRequest:\n *       type: object\n *       required:\n *         - fromBankId\n *         - toBankId\n *         - amount\n *       properties:\n *         fromBankId:\n *           type: string\n *           description: L\u00e4htepanga ID\n *         toBankId:\n *           type: string\n *           description: Sihtpanga ID\n *         amount:\n *           type: number\n *           description: \u00dclekande summa\n *         description:\n *           type: string\n *           description: \u00dclekande kirjeldus\n *     TransactionResponse:\n *       type: object\n *       properties:\n *         transaction:\n *           $ref: '#/components/schemas/Transaction'\n *         fromBankBalance:\n *           type: number\n *           description: L\u00e4htepanga uus bilanss p\u00e4rast \u00fclekannet\n *     Error:\n *       type: object\n *       properties:\n *         error:\n *           type: string\n *           description: Veateade\n */\n\n// Pankade API endpoint-id\n\n/**\n * @swagger\n * /api/banks/register:\n *   post:\n *     summary: Registreeri uus pank\n *     tags: [Pangad]\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/BankRegistrationRequest'\n *     responses:\n *       201:\n *         description: Pank edukalt registreeritud\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/BankRegistrationResponse'\n *       400:\n *         description: Vale p\u00e4ringu andmed\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Error'\n *       500:\n *         description: Serveri viga\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Error'\n */\napp.post('/api/banks/register', (req, res) => {\n  try {\n    const { name, apiUrl } = req.body;\n\n    if (!name || !apiUrl) {\n      return res.status(400).json({ error: 'Panga nimi ja API URL on kohustuslikud' });\n    }\n\n    const banks = readBanks();\n    \n    // Kontrolli, kas pank sama nimega juba eksisteerib\n    const existingBank = banks.banks.find(bank => bank.name === name);\n    if (existingBank) {\n      return res.status(400).json({ error: 'Sellise nimega pank on juba registreeritud' });\n    }\n\n    // Genereeri uus api v\u00f5ti\n    const apiKey = uuidv4();\n\n    // Lisa uus pank\n    const newBank = {\n      id: uuidv4(),\n      name,\n      apiUrl,\n      apiKey,\n      balance: 1000, // Algne bilanss\n      createdAt: new Date().toISOString()\n    };\n\n    banks.banks.push(newBank);\n    writeBanks(banks);\n\n    res.status(201).json({\n      id: newBank.id,\n      name: newBank.name,\n      apiKey: newBank.apiKey,\n      balance: newBank.balance\n    });\n  } catch (error) {\n    console.error('Viga panga registreerimisel:', error);\n    res.status(500).json({ error: 'Serveri viga panga registreerimisel' });\n  }\n});\n\n/**\n * @swagger\n * /api/banks:\n *   get:\n *     summary: Vaata k\u00f5iki registreeritud panku\n *     tags: [Pangad]\n *     responses:\n *       200:\n *         description: K\u00f5ik pangad\n *         content:\n *           application/json:\n *             schema:\n *               type: array\n *               items:\n *                 $ref: '#/components/schemas/Bank'\n *       500:\n *         description: Serveri viga\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Error'\n */\napp.get('/api/banks', (req, res) => {\n  try {\n    const banks = readBanks();\n    // Tagasta piiratud info pankade kohta (ilma API v\u00f5tmeteta)\n    const simplifiedBanks = banks.banks.map(bank => ({\n      id: bank.id,\n      name: bank.name,\n      balance: bank.balance\n    }));\n    res.json(simplifiedBanks);\n  } catch (error) {\n    console.error('Viga pankade laadimisel:', error);\n    res.status(500).json({ error: 'Serveri viga pankade laadimisel' });\n  }\n});\n\n/**\n * @swagger\n * /api/banks/{id}:\n *   get:\n *     summary: Vaata \u00fche panga infot\n *     tags: [Pangad]\n *     security:\n *       - ApiKeyAuth: []\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: string\n *         description: Panga ID\n *     responses:\n *       200:\n *         description: Panga info\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Bank'\n *       401:\n *         description: API v\u00f5ti puudub\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Error'\n *       403:\n *         description: Vale API v\u00f5ti\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Error'\n *       404:\n *         description: Panka ei leitud\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Error'\n *       500:\n *         description: Serveri viga\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Error'\n */\napp.get('/api/banks/:id', (req, res) => {\n  try {\n    const { id } = req.params;\n    const apiKey = req.headers['x-api-key'];\n\n    if (!apiKey) {\n      return res.status(401).json({ error: 'API v\u00f5ti puudub' });\n    }\n\n    const banks = readBanks();\n    const bank = banks.banks.find(bank => bank.id === id);\n\n    if (!bank) {\n      return res.status(404).json({ error: 'Panka ei leitud' });\n    }\n\n    // Kontrolli, kas API v\u00f5ti on \u00f5ige\n    if (bank.apiKey !== apiKey) {\n      return res.status(403).json({ error: 'Vale API v\u00f5ti' });\n    }\n\n    res.json({\n      id: bank.id,\n      name: bank.name,\n      balance: bank.balance\n    });\n  } catch (error) {\n    console.error('Viga panga info laadimisel:', error);\n    res.status(500).json({ error: 'Serveri viga panga info laadimisel' });\n  }\n});